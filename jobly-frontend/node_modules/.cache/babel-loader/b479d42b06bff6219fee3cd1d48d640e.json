{"ast":null,"code":"var _jsxFileName = \"/Users/henrytse/GitHub/Springboard/react-jobly/jobly-frontend/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport Navigation from \"./routes/navigation/Navigation\";\nimport Routes from \"./routes/navigation/Routes\";\nimport LoadingSpinner from \"./common/LoadingSpinner\";\nimport JoblyApi from \"./api/api\";\nimport UserContext from \"./routes/auth/UserContext\";\nimport jwt from \"jsonwebtoken\";\n\n// Key name for storing token in localStorage for \"remember me\" re-login\nexport const TOKEN_STORAGE_ID = \"jobly-token\";\n\n/** Jobly application.\n *\n * - infoLoaded: has user data been pulled from API?\n *   (this manages spinner for \"loading...\")\n *\n * - currentUser: user obj from API. This becomes the canonical way to tell\n *   if someone is logged in. This is passed around via context throughout app.\n *\n * - token: for logged in users, this is their authentication JWT.\n *   Is required to be set for most API calls. This is initially read from\n *   localStorage and synced to there via the useLocalStorage hook.\n *\n * App -> Routes\n */\n\nfunction App() {\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [applicationIds, setApplicationIds] = useState(new Set([]));\n  const [currUser, setCurrUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n\n  // Load user info from API. Until a user is logged in and they have a token,\n  // this should not run. It only needs to re-run when a user logs out, so\n  // the value of the token is a dependency for this effect.\n\n  useEffect(function loadUserInfo() {\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let {\n            username\n          } = jwt.decode(token);\n          // put the token on the Api class so it can use it to call the API.\n          JoblyApi.token = token;\n          let currUser = await JoblyApi.getCurrentUser(username);\n          setCurrUser(currUser);\n          setApplicationIds(new Set(currUser.applications));\n        } catch (err) {\n          console.error(\"App loadUserInfo: problem loading\", err);\n          setCurrUser(null);\n        }\n      }\n      setInfoLoaded(true);\n    }\n\n    // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n    setInfoLoaded(false);\n    getCurrentUser();\n  }, [token]);\n\n  /** Handles site-wide logout. */\n  function logout() {\n    setCurrUser(null);\n    setToken(null);\n  }\n\n  /** Handles site-wide signup.\n   *\n   * Automatically logs them in (set token) upon signup.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function signup(signupData) {\n    try {\n      let token = await JoblyApi.signup(signupData);\n      setToken(token);\n      return {\n        success: true\n      };\n    } catch (errors) {\n      console.error(\"signup failed\", errors);\n      return {\n        success: false,\n        errors\n      };\n    }\n  }\n\n  /** Handles site-wide login.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function login(loginData) {\n    try {\n      let token = await JoblyApi.login(loginData);\n      setToken(token);\n      return {\n        success: true\n      };\n    } catch (errors) {\n      console.error(\"login failed\", errors);\n      return {\n        success: false,\n        errors\n      };\n    }\n  }\n\n  /** Checks if a job has been applied for. */\n  function hasAppliedToJob(id) {\n    return applicationIds.has(id);\n  }\n\n  /** Apply to a job: make API call and update set of application IDs. */\n  function applyToJob(id) {\n    if (hasAppliedToJob(id)) return;\n    JoblyApi.applyToJob(currentUser.username, id);\n    setApplicationIds(new Set([...applicationIds, id]));\n  }\n  if (!infoLoaded) return /*#__PURE__*/React.createElement(LoadingSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 27\n    }\n  });\n  return /*#__PURE__*/React.createElement(BrowserRouter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: {\n      currentUser,\n      setCurrentUser,\n      hasAppliedToJob,\n      applyToJob\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Navigation, {\n    logout: logout,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Routes, {\n    login: login,\n    signup: signup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }))));\n}\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","useLocalStorage","Navigation","Routes","LoadingSpinner","JoblyApi","UserContext","jwt","TOKEN_STORAGE_ID","App","infoLoaded","setInfoLoaded","applicationIds","setApplicationIds","Set","currUser","setCurrUser","token","setToken","loadUserInfo","getCurrentUser","username","decode","applications","err","console","error","logout","signup","signupData","success","errors","login","loginData","hasAppliedToJob","id","has","applyToJob","currentUser","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","setCurrentUser","className"],"sources":["/Users/henrytse/GitHub/Springboard/react-jobly/jobly-frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport Navigation from \"./routes/navigation/Navigation\";\nimport Routes from \"./routes/navigation/Routes\";\nimport LoadingSpinner from \"./common/LoadingSpinner\";\nimport JoblyApi from \"./api/api\";\nimport UserContext from \"./routes/auth/UserContext\";\nimport jwt from \"jsonwebtoken\";\n\n// Key name for storing token in localStorage for \"remember me\" re-login\nexport const TOKEN_STORAGE_ID = \"jobly-token\";\n\n/** Jobly application.\n *\n * - infoLoaded: has user data been pulled from API?\n *   (this manages spinner for \"loading...\")\n *\n * - currentUser: user obj from API. This becomes the canonical way to tell\n *   if someone is logged in. This is passed around via context throughout app.\n *\n * - token: for logged in users, this is their authentication JWT.\n *   Is required to be set for most API calls. This is initially read from\n *   localStorage and synced to there via the useLocalStorage hook.\n *\n * App -> Routes\n */\n\n\nfunction App() {\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [applicationIds, setApplicationIds] = useState(new Set([]));\n  const [currUser, setCurrUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n\n  // Load user info from API. Until a user is logged in and they have a token,\n  // this should not run. It only needs to re-run when a user logs out, so\n  // the value of the token is a dependency for this effect.\n\n  useEffect(function loadUserInfo() {\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let { username } = jwt.decode(token);\n          // put the token on the Api class so it can use it to call the API.\n          JoblyApi.token = token;\n          let currUser = await JoblyApi.getCurrentUser(username);\n          setCurrUser(currUser);\n          setApplicationIds(new Set(currUser.applications));\n        } catch (err) {\n          console.error(\"App loadUserInfo: problem loading\", err);\n          setCurrUser(null);\n        }\n      }\n      setInfoLoaded(true);\n    }\n\n    // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n    setInfoLoaded(false);\n    getCurrentUser();\n  }, [token]);\n\n  /** Handles site-wide logout. */\n  function logout() {\n    setCurrUser(null);\n    setToken(null);\n  }\n\n  /** Handles site-wide signup.\n   *\n   * Automatically logs them in (set token) upon signup.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function signup(signupData) {\n    try {\n      let token = await JoblyApi.signup(signupData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"signup failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /** Handles site-wide login.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function login(loginData) {\n    try {\n      let token = await JoblyApi.login(loginData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"login failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /** Checks if a job has been applied for. */\n  function hasAppliedToJob(id) {\n    return applicationIds.has(id);\n  }\n\n  /** Apply to a job: make API call and update set of application IDs. */\n  function applyToJob(id) {\n    if (hasAppliedToJob(id)) return;\n    JoblyApi.applyToJob(currentUser.username, id);\n    setApplicationIds(new Set([...applicationIds, id]));\n  }\n\n  if (!infoLoaded) return <LoadingSpinner />;\n\n  return (\n      <BrowserRouter>\n        <UserContext.Provider\n            value={{ currentUser, setCurrentUser, hasAppliedToJob, applyToJob }}>\n          <div className=\"App\">\n            <Navigation logout={logout} />\n            <Routes login={login} signup={signup} />\n          </div>\n        </UserContext.Provider>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}