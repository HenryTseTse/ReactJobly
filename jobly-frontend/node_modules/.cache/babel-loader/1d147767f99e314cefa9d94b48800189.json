{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n    const headers = {\n      Authorization: `Bearer ${JoblyApi.token}`\n    };\n    const params = method === \"get\" ? data : {};\n    try {\n      return (await axios({\n        url: `${BASE_URL}/${endpoint}`,\n        method,\n        [method === \"get\" ? \"params\" : \"data\"]: data,\n        headers\n      })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get the current user. */\n\n  static async getCurrentUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  /** Get companies (filtered by name if not undefined) */\n\n  static async getCompanies(name) {\n    let res = await this.request(\"companies\", {\n      name\n    });\n    return res.companies;\n  }\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  /** Get list of jobs (filtered by title if not undefined) */\n\n  static async getJobs(title) {\n    let res = await this.request(\"jobs\", {\n      title\n    });\n    return res.jobs;\n  }\n\n  /** Apply to a job */\n\n  static async applyToJob(username, id) {\n    await this.request(`users/${username}/jobs/${id}`, {}, \"post\");\n  }\n\n  /** Get token for login from username, password. */\n\n  static async login(data) {\n    let res = await this.request(`auth/token`, data, \"post\");\n    return res.token;\n  }\n\n  /** Signup for site. */\n\n  static async signup(data) {\n    let res = await this.request(`auth/register`, data, \"post\");\n    return res.token;\n  }\n\n  /** Save user profile page. */\n\n  static async saveProfile(username, data) {\n    let res = await this.request(`users/${username}`, data, \"patch\");\n    return res.user;\n  }\n}\n\n// for now, put token (\"testuser\" / \"password\" on class)\nJoblyApi.token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" + \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" + \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";\nexport default JoblyApi;","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_BASE_URL","JoblyApi","request","endpoint","data","method","console","debug","headers","Authorization","token","params","url","err","error","response","message","Array","isArray","getCurrentUser","username","res","user","getCompanies","name","companies","getCompany","handle","company","getJobs","title","jobs","applyToJob","id","login","signup","saveProfile"],"sources":["/Users/henrytse/GitHub/Springboard/react-jobly/jobly-frontend/src/api/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n    const headers = { Authorization: `Bearer ${JoblyApi.token}` };\n    const params = method === \"get\" ? data : {};\n\n    try {\n      return (\n        await axios({ \n        url: `${BASE_URL}/${endpoint}`,\n        method, \n        [method === \"get\" ? \"params\": \"data\"]: data, \n        headers \n      })).data;\n      \n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get the current user. */\n\n  static async getCurrentUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  /** Get companies (filtered by name if not undefined) */\n\n  static async getCompanies(name) {\n    let res = await this.request(\"companies\", { name });\n    return res.companies;\n  }\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  /** Get list of jobs (filtered by title if not undefined) */\n\n  static async getJobs(title) {\n    let res = await this.request(\"jobs\", { title });\n    return res.jobs;\n  }\n\n  /** Apply to a job */\n\n  static async applyToJob(username, id) {\n    await this.request(`users/${username}/jobs/${id}`, {}, \"post\");\n  }\n\n  /** Get token for login from username, password. */\n\n  static async login(data) {\n    let res = await this.request(`auth/token`, data, \"post\");\n    return res.token;\n  }\n\n  /** Signup for site. */\n\n  static async signup(data) {\n    let res = await this.request(`auth/register`, data, \"post\");\n    return res.token;\n  }\n\n  /** Save user profile page. */\n\n  static async saveProfile(username, data) {\n    let res = await this.request(`users/${username}`, data, \"patch\");\n    return res.user;\n  }\n}\n\n// for now, put token (\"testuser\" / \"password\" on class)\nJoblyApi.token =\n  \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" +\n  \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" +\n  \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";\n\nexport default JoblyApi;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,kBAAkB,IAAI,uBAAuB;;AAE1E;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,QAAQ,CAAC;EACb;;EAGA,aAAaC,OAAOA,CAACC,QAAQ,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAEC,MAAM,GAAG,KAAK,EAAE;IACxDC,OAAO,CAACC,KAAK,CAAC,WAAW,EAAEJ,QAAQ,EAAEC,IAAI,EAAEC,MAAM,CAAC;;IAElD;IACA;IACA,MAAMG,OAAO,GAAG;MAAEC,aAAa,EAAG,UAASR,QAAQ,CAACS,KAAM;IAAE,CAAC;IAC7D,MAAMC,MAAM,GAAGN,MAAM,KAAK,KAAK,GAAGD,IAAI,GAAG,CAAC,CAAC;IAE3C,IAAI;MACF,OAAO,CACL,MAAMR,KAAK,CAAC;QACZgB,GAAG,EAAG,GAAEf,QAAS,IAAGM,QAAS,EAAC;QAC9BE,MAAM;QACN,CAACA,MAAM,KAAK,KAAK,GAAG,QAAQ,GAAE,MAAM,GAAGD,IAAI;QAC3CI;MACF,CAAC,CAAC,EAAEJ,IAAI;IAEV,CAAC,CAAC,OAAOS,GAAG,EAAE;MACZP,OAAO,CAACQ,KAAK,CAAC,YAAY,EAAED,GAAG,CAACE,QAAQ,CAAC;MACzC,IAAIC,OAAO,GAAGH,GAAG,CAACE,QAAQ,CAACX,IAAI,CAACU,KAAK,CAACE,OAAO;MAC7C,MAAMC,KAAK,CAACC,OAAO,CAACF,OAAO,CAAC,GAAGA,OAAO,GAAG,CAACA,OAAO,CAAC;IACpD;EACF;;EAEA;;EAEA;;EAEA,aAAaG,cAAcA,CAACC,QAAQ,EAAE;IACpC,IAAIC,GAAG,GAAG,MAAM,IAAI,CAACnB,OAAO,CAAE,SAAQkB,QAAS,EAAC,CAAC;IACjD,OAAOC,GAAG,CAACC,IAAI;EACjB;;EAEA;;EAEA,aAAaC,YAAYA,CAACC,IAAI,EAAE;IAC9B,IAAIH,GAAG,GAAG,MAAM,IAAI,CAACnB,OAAO,CAAC,WAAW,EAAE;MAAEsB;IAAK,CAAC,CAAC;IACnD,OAAOH,GAAG,CAACI,SAAS;EACtB;;EAEA;;EAEA,aAAaC,UAAUA,CAACC,MAAM,EAAE;IAC9B,IAAIN,GAAG,GAAG,MAAM,IAAI,CAACnB,OAAO,CAAE,aAAYyB,MAAO,EAAC,CAAC;IACnD,OAAON,GAAG,CAACO,OAAO;EACpB;;EAEA;;EAEA,aAAaC,OAAOA,CAACC,KAAK,EAAE;IAC1B,IAAIT,GAAG,GAAG,MAAM,IAAI,CAACnB,OAAO,CAAC,MAAM,EAAE;MAAE4B;IAAM,CAAC,CAAC;IAC/C,OAAOT,GAAG,CAACU,IAAI;EACjB;;EAEA;;EAEA,aAAaC,UAAUA,CAACZ,QAAQ,EAAEa,EAAE,EAAE;IACpC,MAAM,IAAI,CAAC/B,OAAO,CAAE,SAAQkB,QAAS,SAAQa,EAAG,EAAC,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC;EAChE;;EAEA;;EAEA,aAAaC,KAAKA,CAAC9B,IAAI,EAAE;IACvB,IAAIiB,GAAG,GAAG,MAAM,IAAI,CAACnB,OAAO,CAAE,YAAW,EAAEE,IAAI,EAAE,MAAM,CAAC;IACxD,OAAOiB,GAAG,CAACX,KAAK;EAClB;;EAEA;;EAEA,aAAayB,MAAMA,CAAC/B,IAAI,EAAE;IACxB,IAAIiB,GAAG,GAAG,MAAM,IAAI,CAACnB,OAAO,CAAE,eAAc,EAAEE,IAAI,EAAE,MAAM,CAAC;IAC3D,OAAOiB,GAAG,CAACX,KAAK;EAClB;;EAEA;;EAEA,aAAa0B,WAAWA,CAAChB,QAAQ,EAAEhB,IAAI,EAAE;IACvC,IAAIiB,GAAG,GAAG,MAAM,IAAI,CAACnB,OAAO,CAAE,SAAQkB,QAAS,EAAC,EAAEhB,IAAI,EAAE,OAAO,CAAC;IAChE,OAAOiB,GAAG,CAACC,IAAI;EACjB;AACF;;AAEA;AACArB,QAAQ,CAACS,KAAK,GACZ,oDAAoD,GACpD,iEAAiE,GACjE,6CAA6C;AAE/C,eAAeT,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module"}